--------------------------------------------------------------------------------------------------------------------------------------------------
//1212
--------------------------------------------------------------------------------------------------------------------------------------------------

val query = "(SELECT * FROM teams_1212) AS teams"

val teamsDF = spark.read.jdbc(url, query, connectionProperties)

val query = "(SELECT * FROM matches_1212) AS matches"

val matchesDF = spark.read.jdbc(url, query, connectionProperties)

val tiedMatchesDF = matchesDF.where($"guest_goals" === $"host_goals").select($"guest_team",$"host_team",$"guest_goals",$"host_goals")

val unionDF = matchesDF.select($"host_team",$"guest_team",$"host_goals",$"guest_goals").union(tiedMatchesDF)

val reportDF = unionDF.withColumn("winner",when($"host_goals">$"guest_goals",$"host_team").when($"host_goals"<$"guest_goals",$"host_team").otherwise($"host_team")).withColumn("points",when($"host_goals"===$"guest_goals",lit(1)).otherwise(lit(3))).select($"winner",$"points").groupBy($"winner").agg(sum($"points").as("num_points"))

val resultDF = teamsDF.as("t").join(reportDF.as("r"),$"t.team_id"===$"r.winner","left_outer").select($"t.team_id",$"t.team_name",coalesce($"r.num_points",lit(0))).orderBy($"r.num_points".desc,$"t.team_id")

resultDF.show

--------------------------------------------------------------------------------------------------------------------------------------------------
//1355
--------------------------------------------------------------------------------------------------------------------------------------------------

val query = "(SELECT * FROM friends_1355) AS friends"

val friendsDF = spark.read.jdbc(url, query, connectionProperties)

val groupedDF = friendsDF.groupBy($"activity").agg(count($"id").as("cnt"))

val resultDF = groupedDF.withColumn("min_count",min($"cnt").over()).withColumn("max_count",max($"cnt").over()).where($"cnt"=!=$"max_count" && $"cnt"=!=$"min_count").select($"activity")

resultDF.show

--------------------------------------------------------------------------------------------------------------------------------------------------
//1907
--------------------------------------------------------------------------------------------------------------------------------------------------

val query = "(SELECT * FROM accounts_1907) AS accounts"

val accountsDF = spark.read.jdbc(url, query, connectionProperties)

val categorizedDF = accountsDF.withColumn("category",when($"income"<20000,"Low Salary").when($"income">=20000 && $"income"<=50000,"Average Salary").otherwise("High Salary"))

val groupedDF = categorizedDF.groupBy($"category").agg(count($"account_id").as("accounts_count"))

val categoryDF = Seq("Low Salary","Average Salary","High Salary").toDF("category")

val resultDF = categoryDF.as("c")
		.join(groupedDF.as("g"),$"c.category"===$"g.category","left_outer")
		.select($"c.category",coalesce($"g.accounts_count",lit(0)).as("accounts_count"))

resultDF.show
